<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Simulateur d'improvisation</title>
  <meta name="description" content="Évaluer et développer rapidement votre niveau en prise de parole en public avec le simulateur d'improvisation Letmotiv.">

  <!-- Balises Open Graph pour LinkedIn -->
  <meta property="og:title" content="Simulateur d'improvisation Letmotiv" />
  <meta property="og:description" content="Évaluez et développez rapidement votre niveau en prise de parole en public avec le simulateur d'improvisation Letmotiv." />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://letmotiv-simulateur.fr" />
  <meta property="og:image" content="https://i.postimg.cc/LXxJLTVx/Letmotiv-og-image.png" />
  <meta property="og:image:alt" content="Illustration d'une improvisation en public avec un orateur sur scène." />
  <meta name="author" content="Letmotiv" />
  <meta property="article:published_time" content="2025-01-26" />

  <!-- Balises Twitter (optionnel) -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Simulateur d'improvisation Letmotiv">
  <meta name="twitter:description" content="Évaluez et développez rapidement votre niveau en prise de parole en public avec le simulateur d'improvisation Letmotiv.">
  <meta name="twitter:image" content="https://i.postimg.cc/LXxJLTVx/Letmotiv-og-image.png">

  <!-- Import de la police DM SANS et Montserrat depuis Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=DM+Sans&family=Montserrat:wght@700&display=swap"
    rel="stylesheet"
  />

  <!-- Icônes Font Awesome -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
  />

  <style>
    /* --- GLOBAL --- */
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'DM Sans', sans-serif;
      background-color: #ffffff;
      color: #333333;
      overflow-x: hidden; 
      /* Hauteur supplémentaire pour le défilement */
      min-height: 200vh;
    }

    /* --- HEADER --- */
    .header {
      background-color: #182d84;
      color: #FFFFFF;
      font-size: 16px;
      font-weight: bold;
      text-align: center;
      padding: 10px;
      width: 100%;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 10;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 5px;
      height: 60px; /* Hauteur fixe pour compenser en scroll */
    }

    .header a {
      color: #FFFFFF;
      text-decoration: none;
    }
    .header a:hover {
      text-decoration: none;
    }

    .header-l1 {
      font-size: 16px;
    }
    .header-l2 {
      font-size: 14px;
    }

    /* --- BARRE DE PROGRESSION --- */
    .progress-container {
      position: fixed;
      top: 60px; /* Juste sous le header */
      left: 0;
      width: 100%;
      height: 8px;
      background-color: rgba(24, 45, 132, 0.1);
      z-index: 9;
    }
    .progress-bar {
      width: 0%;
      height: 100%;
      background-color: #00a48a;
      transition: width 0.5s ease;
    }

    /* --- BOÎTE D'INTRODUCTION --- */
    .intro-box {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #182d84, #00a48a);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      color: #ffffff;
      z-index: 20;
      animation: fadeIn 1s ease forwards;
    }
    .intro-box h1 {
      font-family: 'Montserrat', sans-serif;
      font-size: 2.5rem;
      margin-bottom: 30px;
      animation: slideDown 1s ease forwards;
    }
    .intro-box button {
      background-color: #ffffff;
      color: #182d84;
      font-family: 'DM Sans', sans-serif;
      font-size: 1.2rem;
      border: none;
      border-radius: 25px;
      padding: 15px 30px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.3s, color 0.3s;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    }
    .intro-box button:hover {
      background-color: #00a48a;
      color: #ffffff;
      transform: scale(1.05);
    }

    /* Animations de fadeIn, fadeOut, slideDown */
    @keyframes fadeIn {
      from { opacity: 0; }
      to   { opacity: 1; }
    }
    @keyframes fadeOut {
      from { opacity: 1; }
      to   { opacity: 0; }
    }
    @keyframes slideDown {
      from { transform: translateY(-50px); opacity: 0; }
      to   { transform: translateY(0); opacity: 1; }
    }

    /* --- BOXES EN COLONNE (vertical) --- */
    .box {
      scroll-margin-top: 80px; /* pour éviter que le header fixe ne cache le titre */
      width: 90%;
      max-width: 600px;
      margin: 120px auto 40px; /* espace en haut pour ne pas être sous le header */
      background-color: #E2E7E3;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
      text-align: center;
      font-size: 14px;
      border: 2px solid #eeeeee;
      position: relative;
    }

    /* --- Header interne des boîtes --- */
    .box-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
      position: relative;
    }
    .box-title {
      font-size: 18px;
      font-weight: bold;
      color: #182d84;
      flex-grow: 1;
      text-align: center;
    }
    .step-indicator {
      width: 40px;
      height: 40px;
      background-color: #182d84;
      color: #FFFFFF;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 14px;
    }

    /* --- Boutons fleche haut/bas --- */
    .up-btn,
    .down-btn {
      border: 2px solid #182d84;
      background-color: transparent;
      color: #182d84;
      font-size: 16px;
      cursor: pointer;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s, color 0.3s, transform 0.3s;
    }
    .up-btn:hover,
    .down-btn:hover {
      background-color: #00a48a;
      color: #ffffff;
      transform: scale(1.05);
    }
    .up-btn:active,
    .down-btn:active {
      background-color: #086f65;
      transform: scale(1.02);
    }
    /* Pour cacher la flèche haut sur la box1 si vous voulez (optionnel) */
    .hidden-visibility {
      visibility: hidden;
    }

    /* Sous-titres de sections (mode d'emploi, etc.) */
    .section-subtitle {
      font-size: 16px;
      color: #000000;
      font-weight: bold;
      margin: 0 0 10px;
    }

    /* Encadré pour l'explication des objectifs */
    .explanation-box {
      visibility: hidden;
      opacity: 0;
      transform: translateY(-10px);
      margin-top: 0;
      background-color: #fefefe;
      border: 0 solid #ccc;
      border-radius: 8px;
      padding: 10px;
      text-align: center;
      font-weight: bold;
      font-size: 14px;
      font-style: italic;
      color: #333;
      transition: border 0.5s ease, opacity 0.5s ease, transform 0.5s ease;
    }
    .explanation-box.show {
      visibility: visible;
      opacity: 1;
      transform: translateY(0);
      border: 2px solid #ccc;
    }

    /* BOX1 : Choix d’objectif */
    .objectives-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-top: 10px;
    }
    .selected-objective {
      background-color: #00a48a !important;
      color: #ffffff;
    }

    /* BOX2 : Vidéo, enregistrement, etc. */
    .subject-wrapper {
      margin-top: 10px;
      background-color: #fefefe;
      border: 2px solid #ccc;
      border-radius: 8px;
      padding: 10px;
      text-align: center;
      font-size: 14px;
      font-style: italic;
      color: #333;
      display: none; 
    }
    .subject-wrapper span {
      font-weight: bold;
    }

    .video-box {
      margin: 10px auto;
      border: 3px solid #182d84;
      border-radius: 6px;
      max-width: 500px;
      background-color: #fefefe;
      height: 300px;
      position: relative;
      display: flex;
      justify-content: center; 
      align-items: center;     
      overflow: hidden;
    }
    .video-box video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 4px;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1; 
    }
    .video-box .video-text {
      position: absolute;
      z-index: 2;
      color: #555;
      font-style: italic;
      font-size: 14px;
      text-align: center;
      padding: 20px;
      pointer-events: none;
    }
    .recording-indicator {
      position: absolute;
      top: 10px;
      right: 10px;
      display: flex;
      align-items: center;
      background-color: rgba(255, 255, 255, 0.8);
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 14px;
      color: #ff0000;
      display: none; 
      z-index: 3;
    }
    .recording-indicator .dot {
      height: 10px;
      width: 10px;
      background-color: #ff0000;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
      animation: blink 1s infinite;
    }
    @keyframes blink {
      0% { opacity: 1; }
      50% { opacity: 0; }
      100% { opacity: 1; }
    }
    .countdown {
      position: absolute;
      bottom: 10px; 
      right: 10px; 
      font-size: 24px;
      color: #ffffff;
      display: none;
      z-index: 4;
      background-color: rgba(0, 0, 0, 0.5); 
      padding: 5px 10px;
      border-radius: 5px;
      text-align: center;
    }
    .initial-countdown-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(128, 128, 128, 0.6);
      display: none; 
      align-items: center;
      justify-content: center;
      z-index: 5;
      border-radius: 6px;
    }
    .initial-countdown {
      font-size: 48px;
      color: #ffffff;
      font-weight: bold;
    }
    .impro-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center; 
      margin-top: 10px;
    }
    .hidden-btn {
      display: none;
    }

    /* BOX4 : Partage LinkedIn et Options de Progression */
    .box4-content {
      margin-top: 20px;
      background-color: #fefefe;
      border: 2px solid #ccc;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
      text-align: center;
    }
    .linkedin-share-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background-color: #0e76a8;
      color: #FFFFFF;
      border: none;
      border-radius: 25px;
      padding: 10px 20px;
      font-weight: bold;
      text-decoration: none;
      transition: background-color 0.3s, transform 0.3s;
      cursor: pointer;
      margin: 5px;
      gap: 10px;
    }
    .linkedin-share-button:hover,
    .linkedin-share-button:active {
      background-color: #085a8c;
      transform: translateY(-3px);
    }
    .progression-buttons {
      margin-top: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }
    .progression-buttons a {
      width: 100%;
      max-width: 300px;
      display: flex;
      align-items: center;
      justify-content: center; 
    }

    /* BOX3 : Analyse + Formulaire téléchargement */
    .download-section {
      text-align: left;
      margin-bottom: 20px;
    }
    .download-buttons {
      margin-top: 20px;
      background-color: #fefefe;
      border: 2px solid #ccc;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
      display: none; 
      text-align: center;
      transition: opacity 0.5s ease, transform 0.5s ease;
    }
    .download-buttons.show {
      display: block;
      opacity: 1;
      transform: translateY(0);
    }
    .error-message {
      color: red;
      margin-top: 10px;
      font-weight: bold;
      display: none;
      text-align: center; 
      width: 100%;
    }
    .input-group {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      width: 48%;
    }
    .input-group label {
      margin-bottom: 5px;
      font-weight: bold;
      color: #000;
    }
    .input-group input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-family: 'DM Sans', sans-serif;
      font-size: 14px;
      box-sizing: border-box;
      transition: border-color 0.3s;
    }
    .input-group input:focus {
      border-color: #00a48a;
      outline: none;
    }
    .download-fields {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin-bottom: 15px;
    }

    /* Boutons généraux */
    button,
    a.btn {
      background-color: #182d84;
      color: #FFFFFF;
      font-family: 'DM Sans', sans-serif;
      font-size: 16px;
      border: none;
      border-radius: 25px;
      padding: 10px 20px;
      cursor: pointer;
      margin: 5px;
      text-decoration: none;
      transition: background-color 0.3s, transform 0.3s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }
    button:hover,
    button:active,
    a.btn:hover,
    a.btn:active {
      background-color: #00a48a;
      transform: translateY(-3px);
    }
  </style>
</head>
<body>
  <!-- BOÎTE D'INTRODUCTION -->
  <div class="intro-box" id="intro-box">
    <h1>Entraine-toi à la prise de parole en public</h1>
    <button id="start-intro-btn" aria-label="Commencer">Commencer</button>
  </div>

  <!-- HEADER -->
  <div class="header">
    <div class="header-l1">Simulateur d'improvisation en public</div>
    <div class="header-l2">by Letmotiv</div>
  </div>

  <!-- BARRE DE PROGRESSION (optionnelle) -->
  <div class="progress-container">
    <div class="progress-bar" id="top-progress-bar"></div>
  </div>

  <!-- BOX1 : Choix d'objectif -->
  <div class="box" id="box1">
    <div class="box-header">
      <!-- Flèche HAUT (masquée sur la 1ère box) -->
      <button class="up-btn hidden-visibility" aria-label="Aller à la box précédente">
        <i class="fas fa-arrow-up"></i>
      </button>
      <div class="box-title">Choisis ton objectif</div>
      <div class="step-indicator">1/4</div>
    </div>

    <div class="objectives-container">
      <button data-category="convaincre">Convaincre</button>
      <button data-category="inspirer">Inspirer</button>
      <button data-category="lacher-prise">Lâcher prise</button>
      <button data-category="toast">Porter un toast</button>
      <button data-category="repartie">Avoir de la répartie</button>
      <button data-category="vendre">Vendre</button>
      <button data-category="conflit">Gérer un conflit</button>
      <button data-category="diction">Diction</button>
    </div>

    <div id="objective-error" class="error-message">
      Sélectionne un objectif avant de continuer.
    </div>
    <div class="explanation-box" id="explanation-box"></div>

    <!-- Flèche BAS => scroller vers box2 -->
    <button class="down-btn" id="down-btn1" aria-label="Aller à la box suivante">
      <i class="fas fa-arrow-down"></i>
    </button>
  </div>

  <!-- BOX2 : Vidéo, enregistrement, etc. -->
  <div class="box" id="box2">
    <div class="box-header">
      <!-- Flèche HAUT => box1 -->
      <button class="up-btn" id="up-btn2" aria-label="Aller à la box précédente">
        <i class="fas fa-arrow-up"></i>
      </button>
      <div class="box-title">Lance ton improvisation</div>
      <div class="step-indicator">2/4</div>
    </div>

    <button id="generate-subject-btn">Générer un sujet aléatoire</button>
    <div id="subject-wrapper" class="subject-wrapper">
      <span id="subject-display"></span>
    </div>

    <div class="video-box">
      <video id="preview" autoplay muted></video>
      <div class="video-text" id="video-text">
        Ici va s'enregistrer ton improvisation en vidéo. <br>
        Lorsque tu es prêt, clique sur le bouton "Démarrer ton impro" en-dessous.<br><br>
        NB : ta vidéo est stockée directement sur ton appareil. Aucun enregistrement n'est conservé par Letmotiv.
      </div>
      <div class="recording-indicator" id="recording-indicator">
        <span class="dot"></span> Enregistrement en cours
      </div>
      <div class="countdown" id="countdown">1:59</div>
      <div class="initial-countdown-overlay" id="initial-countdown-overlay">
        <div class="initial-countdown" id="initial-countdown">3</div>
      </div>
    </div>

    <div class="impro-actions">
      <button id="start-btn" aria-label="Démarrer l'improvisation">Démarrer ton impro <i class="fas fa-video"></i></button>
      <button id="stop-btn" class="hidden-btn" aria-label="Arrêter l'improvisation">Arrêter ton impro <i class="fas fa-stop"></i></button>
      <button id="restart-btn" class="hidden-btn" aria-label="Récommencer l'improvisation">Récommencer ton impro <i class="fas fa-redo"></i></button>
    </div>

    <div id="impro-error" class="error-message">
      Tu dois réaliser ton improvisation avant de continuer.
    </div>

    <!-- Flèche BAS => box4 (car l'étape 3 correspond à la box4 dans ce code) -->
    <button class="down-btn" id="down-btn2" aria-label="Aller à la box suivante">
      <i class="fas fa-arrow-down"></i>
    </button>
  </div>

  <!-- BOX4 : Partage LinkedIn (3ème étape) -->
  <div class="box" id="box4">
    <div class="box-header">
      <!-- Flèche HAUT => revenir à box2 -->
      <button class="up-btn" id="up-btn4" aria-label="Aller à la box précédente">
        <i class="fas fa-arrow-up"></i>
      </button>
      <div class="box-title">Partage ton expérience</div>
      <div class="step-indicator">3/4</div>
    </div>

    <p>
      Encourage d'autres personnes à relever le défi ! Montre ton courage et inspire les autres à s'améliorer en improvisation ! 
      <b>#ChallengeImproLetmotiv</b>
    </p>
    <a
      id="linkedin-share-button"
      href="https://www.linkedin.com/shareArticle?mini=true&url=https://letmotiv-simulateur.fr"
      target="_blank"
      rel="noopener noreferrer"
      class="linkedin-share-button"
      aria-label="Partager sur LinkedIn"
    >
      <i class="fab fa-linkedin"></i> Partager sur LinkedIn
    </a>

    <div class="progression-buttons">
      <p>Tu souhaites progresser rapidement et efficacement dans la prise de parole en public ?</p>
      <a href="https://alexetpierre.systeme.io/inscription" target="_blank" rel="noopener noreferrer" class="btn" aria-label="S'inscrire à la formation en ligne">
        <i class="fas fa-laptop"></i> Suis notre formation en ligne
      </a>
      <a href="https://www.letmotiv.fr/offres-particulier/coaching-prise-de-parole" target="_blank" rel="noopener noreferrer" class="btn" aria-label="Réserver un coaching">
        <i class="fas fa-chalkboard-teacher"></i> Réserve un coaching
      </a>
    </div>

    <!-- Flèche BAS => aller à la box3 (4e étape) -->
    <button class="down-btn" id="down-btn4" aria-label="Aller à la box suivante">
      <i class="fas fa-arrow-down"></i>
    </button>
  </div>

  <!-- BOX3 : Analyse (4ème étape) -->
  <div class="box" id="box3">
    <div class="box-header">
      <!-- Flèche HAUT => box4 -->
      <button class="up-btn" id="up-btn3" aria-label="Aller à la box précédente">
        <i class="fas fa-arrow-up"></i>
      </button>
      <div class="box-title">Analyse ta prestation</div>
      <div class="step-indicator">4/4</div>
    </div>

    <div class="download-section">
      <h3>Obtiens la vidéo de ta prestation et une grille Letmotiv pour l'analyser :</h3>
      <div class="download-fields">
        <div class="input-group">
          <label for="prenom">Prénom :</label>
          <input type="text" id="prenom" placeholder="Votre prénom" aria-label="Prénom"/>
          <div id="prenom-error" class="error-message">
            Veuillez entrer un prénom valide sans chiffres ni caractères spéciaux.
          </div>
        </div>
        <div class="input-group">
          <label for="email">Email :</label>
          <input type="email" id="email" placeholder="Votre email" aria-label="Email"/>
          <div id="email-error" class="error-message">
            Veuillez entrer une adresse email valide.
          </div>
        </div>
      </div>
      <div>
        <button id="validate-form-btn" aria-label="Valider les informations">Valider</button>
      </div>
    </div>

    <div class="download-buttons" id="download-buttons">
      <button id="download-video-btn" aria-label="Télécharger la vidéo">
        <i class="fas fa-download"></i> Télécharger la vidéo (mp4)
      </button>
      <button id="download-pdf-btn" aria-label="Télécharger la grille d'évaluation">
        <i class="fas fa-download"></i> Télécharger la grille d'évaluation (pdf)
      </button>
    </div>
  </div>

  <!-- SCRIPT -->
  <script>
    /***************************************************************
     * 1) Gestion de l'animation d'intro
     ***************************************************************/
    const introBox = document.getElementById('intro-box');
    const startIntroBtn = document.getElementById('start-intro-btn');
    const topProgressBar = document.getElementById('top-progress-bar');

    // Animation fadeOut sur la box d'intro
    startIntroBtn.addEventListener('click', () => {
      introBox.style.animation = 'fadeOut 0.5s ease forwards';
      // Après 0.5s, on masque l'élément
      setTimeout(() => {
        introBox.style.display = 'none';
        // Avance la barre de progression par exemple
        topProgressBar.style.width = '25%';
      }, 500);
    });

    /***************************************************************
     * 2) Flèches HAUT/BAS pour scroller vers la box précédente/suivante
     ***************************************************************/
    const box1 = document.getElementById('box1');
    const box2 = document.getElementById('box2');
    const box4 = document.getElementById('box4');
    const box3 = document.getElementById('box3');

    // box1 : descendre => box2
    document.getElementById('down-btn1').addEventListener('click', () => {
      box2.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '50%';
    });

    // box2 : flèche haut => box1
    document.getElementById('up-btn2').addEventListener('click', () => {
      box1.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '25%';
    });
    // box2 : flèche bas => box4
    document.getElementById('down-btn2').addEventListener('click', () => {
      box4.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '75%';
    });

    // box4 : flèche haut => box2
    document.getElementById('up-btn4').addEventListener('click', () => {
      box2.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '50%';
    });
    // box4 : flèche bas => box3
    document.getElementById('down-btn4').addEventListener('click', () => {
      box3.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '100%';
    });

    // box3 : flèche haut => box4
    document.getElementById('up-btn3').addEventListener('click', () => {
      box4.scrollIntoView({ behavior: 'smooth' });
      topProgressBar.style.width = '75%';
    });

    /***************************************************************
     * 3) Explications par catégorie + chargement sujets
     ***************************************************************/
    const explanations = {
      convaincre:   "Essaye de convaincre ton auditoire d’une idée générale.",
      inspirer:     "Tu as 2 minutes top chrono pour inspirer ton auditoire.",
      'lacher-prise': "Amuse-toi, libère-toi de tes freins et lâche prise.",
      toast:        "Porte un toast marquant pour célébrer un événement.",
      repartie:     "Réponds du tac-au-tac et montre ton sens de la répartie.",
      vendre:       "Fais un argumentaire de vente percutant.",
      conflit:      "Gère un désaccord ou une tension avec diplomatie.",
      diction:      "Améliore ta diction et rends ton discours plus clair."
    };

    const txtFilesByCategory = {
      convaincre:   "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/convaincre.txt",
      inspirer:     "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/inspirer.txt",
      'lacher-prise': "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/lacher_prise.txt",
      toast:        "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/toast.txt",
      repartie:     "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/repartie.txt",
      vendre:       "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/vendre.txt",
      conflit:      "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/gerer_un_conflit.txt",
      diction:      "https://raw.githubusercontent.com/Citizen11bf/letmotiv/data/diction.txt"
    };

    let subjectsCache = {
      convaincre: null,
      inspirer: null,
      'lacher-prise': null,
      toast: null,
      repartie: null,
      vendre: null,
      conflit: null,
      diction: null
    };

    const objectivesButtons = document.querySelectorAll('.objectives-container button');
    const explanationBox = document.getElementById('explanation-box');

    let currentCategory = null;

    objectivesButtons.forEach(button => {
      button.addEventListener('click', async () => {
        // Bouton sélectionné = vert
        objectivesButtons.forEach(btn => btn.classList.remove('selected-objective'));
        button.classList.add('selected-objective');

        currentCategory = button.dataset.category;
        const explication = explanations[currentCategory] || "";

        // Afficher l'explication
        explanationBox.textContent = explication;
        explanationBox.classList.add('show');

        // Pré-charger le fichier .txt
        if (subjectsCache[currentCategory] === null) {
          await loadSubjects(currentCategory);
        }

        // Cacher le message d'erreur si besoin
        const errorDiv = document.getElementById('objective-error');
        if (errorDiv.style.display === 'block') {
          errorDiv.style.display = 'none';
        }
        const improErrorDiv = document.getElementById('impro-error');
        if (improErrorDiv.style.display === 'block') {
          improErrorDiv.style.display = 'none';
        }
      });
    });

    async function loadSubjects(category) {
      const filePath = txtFilesByCategory[category];
      if (!filePath) {
        console.error("Catégorie inconnue ou chemin manquant:", category);
        return [];
      }
      try {
        const response = await fetch(filePath);
        if (!response.ok) {
          console.error("Erreur lors du fetch du fichier : " + filePath);
          return [];
        }
        const text = await response.text();
        const lines = text
          .split('\n')
          .map(l => l.trim())
          .filter(l => l.length > 0);
        subjectsCache[category] = lines;
        return lines;
      } catch (err) {
        console.error("Erreur fetch: ", err);
        return [];
      }
    }

    /***************************************************************
     * 4) Gérer le sujet d'impro
     ***************************************************************/
    const generateSubjectBtn = document.getElementById('generate-subject-btn');
    const subjectWrapper = document.getElementById('subject-wrapper');
    const subjectDisplay = document.getElementById('subject-display');
    let currentSubject = "";

    generateSubjectBtn.addEventListener('click', () => {
      if (!currentCategory) {
        const errorDiv = document.getElementById('objective-error');
        errorDiv.style.display = 'block';
        errorDiv.textContent = "Merci de sélectionner un objectif avant de générer un sujet.";
        return;
      }
      const subjects = subjectsCache[currentCategory];
      if (!subjects || subjects.length === 0) {
        subjectDisplay.textContent = "Désolé, aucun sujet disponible pour le moment.";
        subjectWrapper.style.display = 'block';
        currentSubject = "";
        return;
      }
      const randomIndex = Math.floor(Math.random() * subjects.length);
      currentSubject = subjects[randomIndex];

      subjectDisplay.textContent = currentSubject;
      subjectWrapper.style.display = 'block';

      // Cacher le message d'erreur
      const improErrorDiv = document.getElementById('impro-error');
      improErrorDiv.style.display = 'none';
    });

    /***************************************************************
     * 5) Enregistrement vidéo
     ***************************************************************/
    let mediaRecorderInstance;
    let recordedChunks = [];
    const preview = document.getElementById('preview');
    const startBtn = document.getElementById('start-btn');
    const stopBtn = document.getElementById('stop-btn');
    const restartBtn = document.getElementById('restart-btn');
    const videoText = document.getElementById('video-text');
    const recordingIndicator = document.getElementById('recording-indicator');
    const countdownElement = document.getElementById('countdown');
    const initialCountdownOverlay = document.getElementById('initial-countdown-overlay');
    const initialCountdown = document.getElementById('initial-countdown');
    let videoURL = "";
    let timerInterval;
    let timeRemaining = 120;

    startBtn.addEventListener('click', startImpro);
    stopBtn.addEventListener('click', stopImpro);
    restartBtn.addEventListener('click', restartImpro);

    async function startImpro() {
      if (!currentSubject) {
        const improErrorDiv = document.getElementById('impro-error');
        improErrorDiv.textContent = "Tu dois générer un sujet avant de démarrer l'improvisation.";
        improErrorDiv.style.display = 'block';
        return;
      }
      if (!navigator.mediaDevices?.getUserMedia) {
        const improErrorDiv = document.getElementById('impro-error');
        improErrorDiv.textContent = "Désolé, l'enregistrement vidéo n'est pas supporté par votre navigateur.";
        improErrorDiv.style.display = 'block';
        return;
      }
      if (!confirm("Votre webcam va se lancer. Voulez-vous continuer ?")) {
        return;
      }
      startInitialCountdown();
    }

    function startInitialCountdown() {
      let count = 3;
      initialCountdown.textContent = count;
      initialCountdownOverlay.style.display = 'flex';

      const countdown = setInterval(() => {
        count--;
        if (count > 0) {
          initialCountdown.textContent = count;
        } else {
          clearInterval(countdown);
          initialCountdownOverlay.style.display = 'none';
          initiateRecording();
        }
      }, 1000);
    }

    async function initiateRecording() {
      const stream = await setupCamera();
      if (!stream) return;

      if (!window.MediaRecorder) {
        const improErrorDiv = document.getElementById('impro-error');
        improErrorDiv.textContent = "Votre navigateur ne supporte pas MediaRecorder.";
        improErrorDiv.style.display = 'block';
        return;
      }

      mediaRecorderInstance = new MediaRecorder(stream);
      recordedChunks = [];

      mediaRecorderInstance.ondataavailable = (event) => {
        if (event.data.size > 0) {
          recordedChunks.push(event.data);
        }
      };
      mediaRecorderInstance.onstop = () => {
        const videoBlob = new Blob(recordedChunks, { type: 'video/mp4' });
        videoURL = URL.createObjectURL(videoBlob);
        // Arrêter la webcam
        stream.getTracks().forEach(t => t.stop());

        // Rétablir l'UI
        stopBtn.classList.add('hidden-btn');
        stopBtn.disabled = true;
        restartBtn.classList.remove('hidden-btn');
        videoText.innerHTML = "Improvisation terminée.";
        videoText.style.display = 'block';
        recordingIndicator.style.display = 'none';
        clearInterval(timerInterval);
      };

      mediaRecorderInstance.start();

      // UI : on masque "Démarrer", on montre "Arrêter"
      startBtn.classList.add('hidden-btn');
      stopBtn.classList.remove('hidden-btn');
      stopBtn.disabled = false;
      restartBtn.classList.add('hidden-btn');

      videoText.style.display = 'none';
      recordingIndicator.style.display = 'flex';

      startTimer();
    }

    async function setupCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        preview.srcObject = stream;
        return stream;
      } catch (error) {
        const improErrorDiv = document.getElementById('impro-error');
        if (error.name === 'NotAllowedError') {
          improErrorDiv.textContent = "Vous avez refusé l'accès à la webcam/micro.";
        } else {
          improErrorDiv.textContent = "Impossible d'accéder à la webcam. Vérifiez vos permissions.";
        }
        improErrorDiv.style.display = 'block';
        console.error(error);
        return null;
      }
    }

    function startTimer() {
      timeRemaining = 120;
      updateCountdownDisplay();
      timerInterval = setInterval(() => {
        timeRemaining--;
        if (timeRemaining >= 0) {
          updateCountdownDisplay();
        } else {
          clearInterval(timerInterval);
          if (mediaRecorderInstance && mediaRecorderInstance.state === 'recording') {
            mediaRecorderInstance.stop();
          }
        }
      }, 1000);
    }

    function updateCountdownDisplay() {
      const minutes = Math.floor(timeRemaining / 60);
      const seconds = timeRemaining % 60;
      countdownElement.textContent = `${minutes}:${seconds < 10 ? '0'+seconds : seconds}`;
      countdownElement.style.display = 'block';
    }

    function stopImpro() {
      if (mediaRecorderInstance && mediaRecorderInstance.state === 'recording') {
        mediaRecorderInstance.stop();
      }
    }

    function restartImpro() {
      videoText.innerHTML = "Ici va s'enregistrer ton improvisation en vidéo. <br>Lorsque tu es prêt, clique sur le bouton \"Démarrer ton impro\" ci-dessous.<br><br>NB : ta vidéo est stockée localement sur ton appareil.";
      videoText.style.display = 'block';
      startBtn.classList.remove('hidden-btn');
      restartBtn.classList.add('hidden-btn');
      videoURL = "";
    }

    /***************************************************************
     * 6) Validation formulaire + Téléchargement
     ***************************************************************/
    const validateFormBtn = document.getElementById('validate-form-btn');
    const prenomInput = document.getElementById('prenom');
    const emailInput = document.getElementById('email');
    const downloadButtons = document.getElementById('download-buttons');
    const downloadVideoBtn = document.getElementById('download-video-btn');
    const downloadPdfBtn = document.getElementById('download-pdf-btn');

    validateFormBtn.addEventListener('click', () => {
      const prenomValue = prenomInput.value.trim();
      const emailValue = emailInput.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      const prenomRegex = /^[A-Za-zÀ-ÿ '-]+$/;

      let valid = true;
      document.getElementById('prenom-error').style.display = 'none';
      document.getElementById('email-error').style.display = 'none';

      if (!prenomValue || !prenomRegex.test(prenomValue)) {
        document.getElementById('prenom-error').style.display = 'block';
        valid = false;
      }
      if (!emailValue) {
        document.getElementById('email-error').textContent = "Merci de renseigner votre email.";
        document.getElementById('email-error').style.display = 'block';
        valid = false;
      } else if (!emailRegex.test(emailValue)) {
        document.getElementById('email-error').textContent = "Veuillez entrer une adresse email valide.";
        document.getElementById('email-error').style.display = 'block';
        valid = false;
      }
      if (!valid) return;

      // Afficher les boutons de téléchargement
      downloadButtons.classList.add('show');
    });

    downloadVideoBtn.addEventListener('click', () => {
      if (!videoURL) {
        alert("Aucune vidéo disponible.");
        return;
      }
      const link = document.createElement('a');
      link.href = videoURL;
      link.download = 'Letmotiv_Improvisation.mp4';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });

    downloadPdfBtn.addEventListener('click', () => {
      const link = document.createElement('a');
      link.href = "https://drive.google.com/uc?export=download&id=1pKif7hwkdSQRXLv6uoSQawCs3DIIcb70";
      link.download = "Questions_Evaluation.pdf";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
  </script>
</body>
</html>
